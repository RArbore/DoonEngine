//INCLUDES "voxelShared.comp"
#version 430 core

layout(local_size_x = 16, local_size_y = 16) in; //16x16 local group size
layout(rgba32f, binding = 0) restrict writeonly uniform image2D colorOutput; //the output texture
layout(rgba32i, binding = 1) restrict readonly uniform iimage2D positionOutput;

void main()
{
	vec3 color;

	ivec2 coords = ivec2(gl_GlobalInvocationID.xy);
	ivec3 position = imageLoad(positionOutput, coords).xyz;

	if(position != ivec3(0xFFFFFFFF))
	{   
        //color = vec3(position) / vec3(mapSize * CHUNK_SIZE);
		ivec3 chunkPos = position / ivec3(CHUNK_SIZE);
		ivec3 localPos = position % ivec3(CHUNK_SIZE);
		//atomicAnd(chunks[get_map_tile(chunkPos).index].voxels[localPos.x][localPos.y][localPos.z].normal, 0xFFFFFF00);
		chunks[get_map_tile(chunkPos).index].voxels[localPos.x][localPos.y][localPos.z].normal &= 0xFFFFFF00;

		CompressedVoxel vox = get_voxel(get_map_tile(chunkPos).index, localPos);
		uint temp = (vox.directLight >> 16) & 0xFF;

		uint r = uint(vox.directLight);
		uint g = vox.specLight >> 16;
		uint b = vox.specLight;
		ivec3 intColor = ivec3(r, g, b) & 0xFFFF;

		//color = vec3(float(temp) / 255.0);
		color = (vec3(intColor) / float(temp)) / 255.0;
		imageStore(colorOutput, coords, vec4(color, 1.0));
	}
}