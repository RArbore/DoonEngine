//INCLUDES "voxelShared.comp"
#version 460

layout(local_size_x = CHUNK_SIZE.x, local_size_y = CHUNK_SIZE.y, local_size_z = CHUNK_SIZE.z) in; //local group size of chunk

layout(std140, binding = 3) restrict readonly buffer lightingRequestBuffer
{
	ivec3 chunkPositions[];
};

//global sun params:
uniform vec3 sunDir; //must be normalized
uniform float sunStrength;
uniform float shadowSoftness;
uniform float ambientStrength;

uniform vec3 camPos;

const vec3 spherePoints[20] = {vec3(0.000000, 1.000000, 0.000000), vec3(-0.329304, 0.894737, 0.301670), vec3(0.053661, 0.789474, -0.611434), vec3(0.443725, 0.684211, 0.578761), vec3(-0.802901, 0.578947, -0.142022), vec3(0.743091, 0.473684, -0.472693), vec3(-0.241344, 0.368421, 0.897786), vec3(-0.444660, 0.263158, -0.856169), vec3(0.927538, 0.157895, 0.338737), vec3(-0.923065, 0.052632, 0.381026), vec3(0.423260, -0.052632, -0.904478), vec3(0.295528, -0.157895, 0.942196), vec3(-0.834714, -0.263158, -0.483736), vec3(0.907976, -0.368421, -0.199614), vec3(-0.506515, -0.473684, 0.720462), vec3(-0.104781, -0.578947, -0.808604), vec3(0.557646, -0.684211, 0.469987), vec3(-0.613260, -0.789474, 0.025359), vec3(0.316560, -0.894737, -0.315017), vec3(-0.000000, -1.000000, 0.000000)};

//--------------------------------------------------------------------------------------------------------------------------------//

bool shadow_ray(ivec3 chunkPos, ivec3 localPos, vec3 normal, vec3 rayPos, vec3 sunDir, out vec3 colorAdd, out float colorMult) //returns true if the shadow ray hit the map
{
	Voxel hitVoxel;

	return step_map(sunDir, 1 / sunDir, rayPos, true, false, hitVoxel, colorAdd, colorMult); //return whether or not the map was hit
}

void specular_ray(ivec3 chunkPos, ivec3 localPos, vec3 normal, vec3 rayPos, vec3 rayDir, vec3 albedo, inout vec3 color)
{
	Voxel hitVoxel;
	vec3 tempPos = rayPos;

	vec3 colorAdd;
	float colorMult;
	if(step_map(rayDir, 1 / rayDir, tempPos, true, false, hitVoxel, colorAdd, colorMult))
	{
		vec3 dist = abs(floor(tempPos * CHUNK_SIZE) - floor(rayPos * CHUNK_SIZE));
		if(dot(dist, dist) > 1)
		{
			vec3 hitColor;
			if(materials[hitVoxel.material].emissive)
				hitColor = hitVoxel.albedo;
			else
				hitColor = (hitVoxel.directLight + hitVoxel.indirectLight + ambientStrength) * hitVoxel.albedo;

			color += (hitColor * colorMult + colorAdd) * albedo;
		}
	}
	else if(dot(rayDir, sunDir) > 0.99)
		color += sunStrength * colorMult + colorAdd;
	else
		color += (max(dot(rayDir, sunDir), 0.1) * sunStrength * colorMult + colorAdd) * albedo * 0.5;
}

//--------------------------------------------------------------------------------------------------------------------------------//

void main()
{
	//find positions:
	ivec3 chunkPos = chunkPositions[gl_WorkGroupID.x].xyz;
	ivec3 localPos = ivec3(gl_LocalInvocationID);
	int chunkIndex = get_map_tile(chunkPos);
	Voxel thisVoxel = decompress_voxel(get_voxel(chunkIndex, localPos), get_indirect_light(chunkIndex, localPos));

	//return if voxel does not exist lol:
	if(thisVoxel.material == 255)
		return;
	
	//find position of ray (center of the voxel):
	vec3 rayPos = INV_CHUNK_SIZE * localPos + chunkPos + HALF_INV_CHUNK_SIZE;
	rayPos = rayPos + (HALF_INV_CHUNK_SIZE - vec3(EPSILON)) * thisVoxel.normal;

	//shadow rays:
	//---------------------------------
	vec3 directLight = vec3(0.0);
	for(int i = 0; i < 20; i++)
	{
		vec3 updatedSunDir = normalize(sunDir * shadowSoftness + spherePoints[i]);

		vec3 colorAdd;
		float colorMult;
		if(!shadow_ray(chunkPos, localPos, thisVoxel.normal, rayPos, updatedSunDir, colorAdd, colorMult))
			directLight += (sunStrength * colorMult + colorAdd) * colorMult; //TODO: maybe find a better way to do this
	}

	directLight /= 20.0;

	//specular rays:
	//---------------------------------
	vec3 specLight = vec3(0.0);
	vec3 viewDir = rayPos - camPos;
	if(materials[thisVoxel.material].specular > 0.0 && dot(viewDir, thisVoxel.normal) < 0.0)
	{
		vec3 reflected = reflect(normalize(viewDir), thisVoxel.normal);

		for(int i = 0; i < 20; i++)
		{
			vec3 specDir = normalize(reflected * 10 + spherePoints[i]);
			specular_ray(chunkPos, localPos, thisVoxel.normal, rayPos, specDir, thisVoxel.albedo, specLight);
		}

		specLight /= 20.0;
	}

	//update the final color
	//---------------------------------
	directLight = clamp(directLight, vec3(0.0), vec3(1.0));
	specLight = clamp(specLight, vec3(0.0), vec3(1.0));

	atomicExchange(chunks[chunkIndex].voxels[localPos.x][localPos.y][localPos.z].directLight, encode_uint_RGBA(uvec4(round(directLight * 255), 0)));
	chunks[chunkIndex].voxels[localPos.x][localPos.y][localPos.z].specLight = encode_uint_RGBA(uvec4(round(specLight * 255), 0));

	return;
}