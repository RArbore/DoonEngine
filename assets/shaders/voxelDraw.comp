//INCLUDES "voxelShared.comp"
#version 430 core
#define INV_GAMMA 0.4545 //for gamma correction (1 / 2.2)

layout(local_size_x = 16, local_size_y = 16) in; //16x16 local group size
layout(rgba32f, binding = 0) uniform image2D colorOutput; //the color output texture

//--------------------------------------------------------------------------------------------------------------------------------//

uniform sampler2D colorSample;   //the color of any rasterized objects
uniform sampler2D depthSample;   //the depth of any rasterized objects

uniform uint viewMode;  	     //what is displayed, 0 = lighting, 1 = albedo, 2 = diffuse light, 3 - specular light, 4 = normals
uniform bool composeRasterized;  //whether or not this scene is being composed with rasterized objects

uniform mat4 invViewMat;		 //the inverse of the view matrix used for rasterization
uniform mat4 invCenteredViewMat; //the inverse of the view matrix (without translation) used for rasterization
uniform mat4 invProjectionMat;	 //the inverse of the projection matrix used for rasterization

//--------------------------------------------------------------------------------------------------------------------------------//

void main()
{
	Voxel finalVoxel;       //the final voxel that is hit
	Material finalMaterial; //the material of the final voxel hit
	vec3 finalColorAdd;     //added to the final color to account for transparency
	float finalColorMult;   //multiplied with the final color to account for transparency
	vec3 finalColor;        //the final color that gets written to the texture

	//calculate ray position and direction:
	ivec2 coords = ivec2(gl_GlobalInvocationID.xy);
	vec2 screenPos = coords / vec2(imageSize(colorOutput)) * 2.0 - 1.0;
	vec2 texCoords = vec2(coords) / vec2(textureSize(colorSample, 0));

	vec3 rayPos = (invViewMat * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
	orgRayPos = rayPos;
	vec3 rayDir = normalize((invCenteredViewMat * invProjectionMat * vec4(screenPos, 0.0, 1.0)).xyz) + EPSILON;
	vec3 invRayDir = 1.0 / rayDir;

	float maxDepth; //TODO: i noticed some flickering with the rasterized objects but cant seem to reproduce it again, need to investigate
	vec3 backgroundColor;
	if(composeRasterized)
	{
		maxDepth = texture(depthSample, texCoords).x * 2.0 - 1.0;

		if(maxDepth < 1.0) //if far clip plane not hit
		{
			vec4 clipSpacePos = vec4(screenPos, maxDepth, 1.0);
			vec4 viewSpacePos = invProjectionMat * clipSpacePos;
			viewSpacePos /= viewSpacePos.w;
			maxDepth = length(viewSpacePos.xyz);

			backgroundColor = texture(colorSample, texCoords).xyz;
		}
		else
		{
			maxDepth = -1.0; //if maxDepth is negative, it will not be tested
			backgroundColor = sky_color(rayDir);
		}
	}
	else
	{
		maxDepth = -1.0;
		backgroundColor = sky_color(rayDir);
	}

	//check if ray hits the map at all:
	vec2 intersection = intersect_AABB(invRayDir, rayPos, vec3(0.0), mapSize);

	if(intersection.x > intersection.y || intersection.y < 0) //make sky color if no intersection at all
	{
		finalColor = backgroundColor;
		finalColor = pow(finalColor, vec3(INV_GAMMA));
	}
	else //if the map is hit, step through it
	{
		if(intersection.x > 0) //only increment rayPos if outside the box
			rayPos += rayDir * (intersection.x + EPSILON);

		if(step_map(rayDir, invRayDir, rayPos, maxDepth, false, finalVoxel, finalColorAdd, finalColorMult))
		{
			finalMaterial = materials[finalVoxel.material];
			finalVoxel.specLight     *= finalMaterial.specular;
			finalVoxel.diffuseLight  *= 1.0 - finalMaterial.specular;

			switch(viewMode)
			{
			case 0: //total lighting
			{	
				vec3 solidColor;
				if(finalMaterial.emissive)
					solidColor = finalVoxel.albedo;
				else
					solidColor = finalVoxel.diffuseLight * finalVoxel.albedo + finalVoxel.specLight;

				finalColor = pow(solidColor * finalColorMult + finalColorAdd, vec3(INV_GAMMA));
				break;
			}
			case 1: //albedo
			{
				finalColor = pow(finalVoxel.albedo, vec3(INV_GAMMA));
				break;
			}
			case 2: //diffuse light
			{
				finalColor = pow(finalMaterial.emissive ? finalVoxel.albedo : finalVoxel.diffuseLight, vec3(INV_GAMMA));
				break;
			}
			case 3: //specular light
			{
				finalColor = pow(finalMaterial.emissive ? finalVoxel.albedo : finalVoxel.specLight, vec3(INV_GAMMA));
				break;
			}
			case 4: //normal
			{
				finalColor = vec3(abs(finalVoxel.normal));
				break;
			}
			}

			uvec3 mapPos = uvec3(floor(rayPos));
			uint index = mapPos.x + mapSize.x * (mapPos.y + mapSize.y * mapPos.z);

			map[index].flag |= 0xF0;
		}
		else
		{
			finalColor = backgroundColor * finalColorMult + finalColorAdd;
			finalColor = pow(finalColor, vec3(INV_GAMMA));
		}
	}

	//store final color to texture:
	imageStore(colorOutput, coords, vec4(finalColor, 1.0));
}
