//INCLUDES "voxelShared.comp"
#version 430 core
#define INV_GAMMA 0.4545 //for gamma correction (1 / 2.2)

layout(local_size_x = 16, local_size_y = 16) in; //16x16 local group size
layout(rgba32f, binding = 0) uniform image2D colorOutput; //the output texture
layout(rgba32ui, binding = 1) uniform uimage2D positionOutput;

uniform vec3 camPos;    //the camera's position
uniform vec3 camDir;    //the direction the camera is pointing
uniform vec3 camPlaneU; //the vector that points along the x-axis of the screen
uniform vec3 camPlaneV; //the vector that points along the y-axis of the screen

uniform vec3 sunDir;

uniform uint viewMode;  //what is displayed, 0 = lighting, 1 = depth, 2 = normals

uniform float ambientStrength; //the minimum light that every voxel receives

//--------------------------------------------------------------------------------------------------------------------------------//

float rand(float seed) //returns a random float between -1 and 1
{
    return fract(sin(seed) * 43758.5453) * 2.0 - 1.0;
}

vec2 rand2(float seed) //returns a vec2 of random floats between -1 and 1
{
	return vec2(rand(seed), rand(seed * 2.0));
}

vec3 rand3(float seed) //returns a vec3 of random floats between -1 and 1
{
	return vec3(rand(seed), rand(seed * 2.0), rand(seed * 3.0));
}

vec3 rand_unit_sphere(float seed) //returns a vec3 of random floats between -1 and 1 that is inside the unit sphere (mag < 1) 
{
	while(true)
	{
		vec3 point = rand3(seed++);
		if(dot(point, point) >= 1.0)
			continue;

		return point;
	}
}

void main()
{
	Voxel finalVoxel;       //the final voxel that is hit
	Material finalMaterial; //the material of the final voxel hit
	vec3 finalColorAdd;     //added to the final color to account for transparency
	float finalColorMult;   //multiplied with the final color to account for transparency
	vec3 finalColor;        //the final color that gets written to the texture
	uvec3 position = uvec3(0xFFFFFFFF);

	//calculate ray position and direction:
	vec2 screenPos;
	screenPos.x = gl_GlobalInvocationID.x / (float(gl_NumWorkGroups.x) * 8.0) - 1.0; //(0,0) at the center of the screen
	screenPos.y = gl_GlobalInvocationID.y / (float(gl_NumWorkGroups.y) * 8.0) - 1.0;

	vec3 rayDir = camDir + screenPos.x * camPlaneU + screenPos.y * camPlaneV;
	vec3 invRayDir = 1.0 / rayDir;
	vec3 rayPos = camPos;

	//check if ray hits the map at all:
	vec2 intersection = intersect_AABB(invRayDir, rayPos, vec3(0.0), mapSize);

	if(intersection.x > intersection.y || intersection.y < 0) //make sky color if no intersection at all
	{
		finalColor = sky_color(normalize(rayDir));
	}
	else //if the map is hit, step through it
	{
		if(intersection.x > 0) //only increment rayPos if outside the box
			rayPos += rayDir * (intersection.x + EPSILON);

		if(step_map(rayDir, invRayDir, rayPos, false, true, finalVoxel, finalColorAdd, finalColorMult))
		{
			finalMaterial = materials[finalVoxel.material];
			finalVoxel.specLight     *= finalMaterial.specular;
			finalVoxel.indirectLight *= 1.0 - finalMaterial.specular;
			finalVoxel.directLight   *= 1.0 - finalMaterial.specular;

			finalColor = pow(finalVoxel.albedo, vec3(INV_GAMMA));

			position = uvec3((rayPos + 2 * EPSILON * rayDir) * CHUNK_SIZE);
			vec3 newSunDir = normalize(sunDir * 3 + rand_unit_sphere(2 * screenPos.x + screenPos.y));
			if(step_map(newSunDir, 1 / newSunDir, rayPos, false, false, finalVoxel, finalColorAdd, finalColorMult))
				finalColor *= 0.5;

			/*switch(viewMode)
			{
			case 0: //total lighting
			{	
				vec3 solidColor;
				if(finalMaterial.emissive == 1)
					solidColor = finalVoxel.albedo;
				else
					solidColor = (finalVoxel.directLight + finalVoxel.indirectLight + ambientStrength) * finalVoxel.albedo + finalVoxel.specLight;

				finalColor = pow(solidColor * finalColorMult + finalColorAdd, vec3(INV_GAMMA));
				break;
			}
			case 1: //albedo
			{
				finalColor = pow(finalVoxel.albedo, vec3(INV_GAMMA));
				break;
			}
			case 2: //direct light
			{
				finalColor = pow(finalMaterial.emissive == 1 ? finalVoxel.albedo : finalVoxel.directLight, vec3(INV_GAMMA));
				break;
			}
			case 3: //indirect light
			{
				finalColor = pow(finalMaterial.emissive == 1 ? finalVoxel.albedo : finalVoxel.indirectLight, vec3(INV_GAMMA));
				break;
			}
			case 4: //specular light
			{
				finalColor = pow(finalMaterial.emissive == 1 ? finalVoxel.albedo : finalVoxel.specLight, vec3(INV_GAMMA));
				break;
			}
			case 5: //normal
			{
				finalColor = vec3(abs(finalVoxel.normal));
				break;
			}
			}*/

			uvec3 mapPos = uvec3(floor(rayPos));
			uint index = mapPos.x + mapSize.x * (mapPos.y + mapSize.y * mapPos.z);

			if(map[index].visible == 0)
				map[index].visible = 1;
		}
		else
		{
			finalColor = sky_color(normalize(rayDir));

			if(viewMode == 0)
				finalColor = finalColor * finalColorMult + finalColorAdd;
		}
	}

	//store final color to texture:
	ivec2 coords = ivec2(gl_GlobalInvocationID.xy);
	//imageStore(colorOutput, coords, vec4(finalColor, 1.0));
	imageStore(positionOutput, coords, uvec4(position, 0));
}