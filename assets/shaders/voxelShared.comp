//----------------------------------------------------------BEGIN-SHARED----------------------------------------------------------//

#define CHUNK_SIZE ivec3(8, 8, 8) //size of each individual chunk
#define INV_CHUNK_SIZE vec3(0.125, 0.125, 0.125) //1 / CHUNK_SIZE, precomputed
#define HALF_INV_CHUNK_SIZE vec3(0.0625, 0.0625, 0.0625) //1 / CHUNK_SIZE, precomputed
#define MAP_SIZE ivec3(3, 3, 3) //size of the map (number of chunks in each direction)
#define MAX_CHUNKS 11 //the maximum number of chunks that can be stored at once

//--------------------------------------------------------------------------------------------------------------------------------//

struct Voxel //a single voxel
{
	vec3 color;
	int material;

	vec3 accumColor;
	uint numSamples;
};

struct Chunk //a chunk of voxels
{
	Voxel voxels[CHUNK_SIZE.x][CHUNK_SIZE.y][CHUNK_SIZE.z];
};

//--------------------------------------------------------------------------------------------------------------------------------//

layout(std140, binding = 0) restrict buffer mapBuffer //the buffer that contains the chunk map
{
	int map[MAP_SIZE.x][MAP_SIZE.y][MAP_SIZE.z];
};

layout(std140, binding = 1) restrict buffer chunkBuffer //the buffer that contains all of the chunks
{
	Chunk chunks[MAX_CHUNKS];
};

//--------------------------------------------------------------------------------------------------------------------------------//

bool in_map_bounds(vec3 pos) //returns whether a position is in bounds in the map
{
	return pos.x < MAP_SIZE.x && pos.y < MAP_SIZE.y && pos.z < MAP_SIZE.z && pos.x >= 0 && pos.y >= 0 && pos.z >= 0;
}

bool in_chunk_bounds(vec3 pos) //returns whether a position is in bounds in a chunk
{
	return pos.x < CHUNK_SIZE.x && pos.y < CHUNK_SIZE.y && pos.z < CHUNK_SIZE.z && pos.x >= 0 && pos.y >= 0 && pos.z >= 0;
}

//--------------------------------------------------------------------------------------------------------------------------------//

int get_map_tile(vec3 pos) //returns the value of the map at a position DOESNT DO ANY BOUNDS CHECKING
{
	ivec3 ipos = ivec3(pos);
	return map[ipos.x][ipos.y][ipos.z];
}

Voxel get_voxel(uint chunk, vec3 pos) //returns the voxel of a chunk at a position DOESNT DO ANY BOUNDS CHECKING
{
	ivec3 ipos = ivec3(pos);
	return chunks[chunk].voxels[ipos.x][ipos.y][ipos.z];
}

//--------------------------------------------------------------------------------------------------------------------------------//

vec2 intersect_AABB(vec3 invRayDir, vec3 rayPos, vec3 boxMin, vec3 boxMax) //returns how far along a ray a box is intersected
{
    vec3 tMin = (boxMin - rayPos) * invRayDir;
    vec3 tMax = (boxMax - rayPos) * invRayDir;

    vec3 t1 = min(tMin, tMax);
    vec3 t2 = max(tMin, tMax);

    float tNear = max(max(t1.x, t1.y), t1.z);
    float tFar  = min(min(t2.x, t2.y), t2.z);

    return vec2(tNear, tFar);
}

vec3 normal_AABB(vec3 intersectPos, vec3 boxMin, vec3 boxMax) //returns the normal of an AABB at a point
{
	vec3 c = (boxMin + boxMax) * 0.5;
	vec3 p = intersectPos - c;
	vec3 d = (boxMax - boxMin) * 0.5;
	const float bias = 1.00001;

	return normalize(trunc(p / d * bias));
}

//--------------------------------------------------------------------------------------------------------------------------------//

void iterate_DDA(vec3 deltaDist, vec3 rayStep, inout vec3 sideDist, inout vec3 mapPos, out vec3 normal) //steps through one tile with the DDA algorithm
{
	//https://www.youtube.com/watch?v=NbSee-XM7WA <- see this video for a good overview of the algorithm

	if (sideDist.x < sideDist.y) 
	{
		if (sideDist.x < sideDist.z) 
		{
			sideDist.x += deltaDist.x;
			mapPos.x += rayStep.x;
			normal = vec3(-rayStep.x, 0, 0);
		}
		else 
		{
			sideDist.z += deltaDist.z;
			mapPos.z += rayStep.z;
			normal = vec3(0, 0, -rayStep.z);
		}
	}
	else
	{
		if (sideDist.y < sideDist.z) 
		{
			sideDist.y += deltaDist.y;
			mapPos.y += rayStep.y;
			normal = vec3(0, -rayStep.y, 0);
		}
		else 
		{
			sideDist.z += deltaDist.z;
			mapPos.z += rayStep.z;
			normal = vec3(0, 0, -rayStep.z);
		}
	}
}

//--------------------------------------------------------------------------------------------------------------------------------//

bool step_chunk(uint chunk, vec3 rayDir, vec3 invRayDir, vec3 rayPos, vec3 ignore, out Voxel voxel, inout vec3 normal, out vec3 chunkPos) //steps a ray through a chunk, returns true if something was hit
{
	vec3 mapPos = vec3(floor(rayPos)); //the position in the voxel map
	vec3 deltaDist = abs(invRayDir);   //the distance the ray has to travel to move one unit in each direction
	vec3 rayStep = vec3(sign(rayDir)); //the direction the ray steps
	vec3 sideDist = (sign(rayDir) * (mapPos - rayPos) + (sign(rayDir) * 0.5) + 0.5) * deltaDist; //the total distance the ray has to travel to reach one additional unit in each direction (accounts for starting position as well)

	while(in_chunk_bounds(mapPos))
	{
		//check if a solid voxel has been hit:
		Voxel res = get_voxel(chunk, mapPos);
		if (res.material >= 0 && mapPos != ignore)
		{
			voxel = res;
			chunkPos = mapPos;

			return true;
		}

		//iterate the dda algorithm:
		iterate_DDA(deltaDist, rayStep, sideDist, mapPos, normal);
	}

	return false;
}

bool step_map(vec3 rayDir, vec3 invRayDir, inout vec3 rayPos, vec3 ignore, out Voxel voxel, inout vec3 normal) //steps a ray through the map (not individual chunks), returns true if something was hit
{
	vec3 mapPos = vec3(floor(rayPos)); //the position in the voxel map
	vec3 deltaDist = abs(invRayDir);   //the distance the ray has to travel to move one unit in each direction
	vec3 rayStep = vec3(sign(rayDir)); //the direction the ray steps
	vec3 sideDist = (sign(rayDir) * (mapPos - rayPos) + (sign(rayDir) * 0.5) + 0.5) * deltaDist; //the total distance the ray has to travel to reach one additional unit in each direction (accounts for starting position as well)

	if(!in_map_bounds(mapPos)) //iterate once if not in bounds to stop from exiting if the ray is *just* outside
		iterate_DDA(deltaDist, rayStep, sideDist, mapPos, normal);

	while(in_map_bounds(mapPos))
	{
		//check if a solid voxel has been hit:
		int res = get_map_tile(mapPos);
		if (res >= 0)
		{
			vec2 intersection = intersect_AABB(invRayDir, rayPos, mapPos, mapPos + 1); //find exactly where the ray intersects
			if(intersection.x > 0) //only increment rayPos if outside the box
				rayPos += rayDir * (intersection.x + 0.00001); //add so that new pos is inside the chunk

			vec3 chunkPos;
			if(step_chunk(res, rayDir, invRayDir, (rayPos - mapPos) * CHUNK_SIZE, ignore, voxel, normal, chunkPos))
			{
				intersection = intersect_AABB(invRayDir, rayPos, mapPos + chunkPos * INV_CHUNK_SIZE, mapPos + chunkPos * INV_CHUNK_SIZE + INV_CHUNK_SIZE); //find exactly where the ray intersects
				rayPos += rayDir * (intersection.x - 0.00001); //subtract so that new pos isnt inside a voxel

				return true;
			}
		}

		//iterate the dda algorithm:
		iterate_DDA(deltaDist, rayStep, sideDist, mapPos, normal);
	}

	return false;
}

//-----------------------------------------------------------END-SHARED-----------------------------------------------------------//
